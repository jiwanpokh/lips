
CL-USER 1 > (defun my-factorial (n)
              (cond ( ( equal n 0) 1)
                    ((> n 0)(* (my-factorial ( -n 1))n))))
MY-FACTORIAL

CL-USER 2 > (my-factorial 5)

Type :b for backtrace or :c <option number> to proceed.
Type :bug-form "<subject>" for a bug report template or :? for other options.

CL-USER 3 : 1 > (defun fibonaci (n) 
"This function will return nth fibonacci  number"
(cond ((>n 2)(+ (fibonaci ( - n 1))(fibonaci ( -n 2))))
      ((equal 1) 1)
      (( equal 2) 1)))
FIBONACI

CL-USER 4 : 1 > (fibonaci 6)

Error: Undefined operator >N in form (>N 2).
  1 (continue) Try invoking >N again.
  2 Return some values from the form (>N 2).
  3 Try invoking something other than >N with the same arguments.
  4 Set the symbol-function of >N to another function.
  5 Set the macro-function of >N to another function.
  6 (abort) Return to level 1.
  7 Return to debug level 1.
  8 Return to level 0.
  9 Return to top loop level 0.

Type :b for backtrace or :c <option number> to proceed.
Type :bug-form "<subject>" for a bug report template or :? for other options.

CL-USER 5 : 2 > (defun fibonaci (n) 
"This function will return nth fibonacci  number"
(cond ((>n 2)(+ (fibonaci ( - n 1))(fibonaci ( -n 2))))
      ((equal 1 n) 1)
      (( equal 2 n) 1)))
FIBONACI

CL-USER 6 : 2 > (fibonaci 5)

Type :b for backtrace or :c <option number> to proceed.
Type :bug-form "<subject>" for a bug report template or :? for other options.

CL-USER 7 : 3 > (defun fibonaci (n) 
"This function will return nth fibonacci  number"
(cond ((>n 2)(+ (fibonaci ( - n 1))(fibonaci ( - n 2))))
      ((equal 1 n) 1)
      (( equal 2 n) 1)))
FIBONACI

CL-USER 8 : 3 > (fibonaci 5)

Error: Undefined operator >N in form (>N 2).
   1 (continue) Try invoking >N again.
   2 Return some values from the form (>N 2).
   3 Try invoking something other than >N with the same arguments.
   4 Set the symbol-function of >N to another function.
   5 Set the macro-function of >N to another function.
   6 (abort) Return to level 3.
   7 Return to debug level 3.
   8 Return to level 2.
   9 Return to debug level 2.
  10 Return to level 1.
  11 Return to debug level 1.
  12 Return to level 0.
  13 Return to top loop level 0.

Type :b for backtrace or :c <option number> to proceed.
Type :bug-form "<subject>" for a bug report template or :? for other options.

CL-USER 9 : 4 > (defun fibonaci (n) 
"This function will return nth fibonacci  number"
(cond ((>n 2)(+ (fibonaci (- n 1))(fibonaci (- n 2))))
      ((equal 1 n) 1)
      (( equal 2 n) 1)))
FIBONACI

CL-USER 11 : 5 > (defun fibonaci (n) 
"This function will return nth fibonacci  number"
(cond ((>n 2)(+ (fibonaci (- n 1))(fibonaci (- n 2))))
      ((equal 1 n) 1)
      (( equal 2 n) 2)))
FIBONACI

CL-USER 13 : 6 > (defun fibonaci (n) 
"This function will return nth fibonacci  number"
(cond ((> n 2)(+ (fibonaci (- n 1))(fibonaci (- n 2))))
      ((equal 1 n) 1)
      (( equal 2 n) 2)))
FIBONACI

CL-USER 14 : 6 > (fibonaci 5)
8

CL-USER 15 : 6 > 